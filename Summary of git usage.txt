1. Git은 파일을 Commited, Modified, Staged 세 가지 상태로 관리
- commited: 데이터가 로컬 저장소에 안전하게 저장됐다는 것을 의미
- modified: 수정 파일을 아직 로컬 저장소에 commit 하지 않은 상태
- staged: 수정한 파일을 곧 commit할 것으로 표시한 상태

2. Git은 Gti Directory, Working Directory, Staging Area 세 가지 영역으로 분리됨
- Git Directory: Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 가리킴(.git)
- Working Directory: 수정할 파일들이 있는 디렉토리
- Staging Area: Git Directory에 있으며 곧 commit할 파일에 대한 정보 저장


============ git bash 기본적인 명령어 =============
화면 초기화: ctrl + L
한 행의 처음과 끝으로 이동: ctrl + A, ctrl + E
목록 보기: ls 혹은 dir
파일 내용 보기: cat
특정 문자 검색: grep
디렉토리로 이동: cd
디렉토리 생성: mkdir
파일 삭제: rm
파일 생성: touch

============ git 설정 방법(최초 1회 실행) =============
git config --global user.name "username" // git commit에 사용될 username
git config --global user.email "emailAddress" // git commit에 사용될 email
git config --list // 설정내용 확인

============ 현재 디렉토리를 로컬저장소로 설정 =============
cd C:\dev\workspace\webDevStudy // 로컬저장소로 설정할 프로젝트 위치로 이동
git init // 로컬저장소로 설정, (master) 브랜치로 보이면 성공
rm -r .git // init 취소 위한 명령어

============ 로컬저장소 상태 확인 =============
git status // 로컬저장소 상태 확인

============ 준비 영역(Staging Area)로 파일 이동 =============
git add // 파일을 전송 위한 준비 영역에 추가
git add a.html // a.html 파일 추가
git add . // 워킹 디렉토리 폴더 내 모든 파일 추가
git add -i // 명령 프롬프트에서 상호작용하며 파일 추가

============ 준비 영역(Staging Area)의 파일을 로컬저장소에 저장 =============
git commit // 에디터에서 커밋 메세지 입력 후 저장시 커밋됨
git commit -m // 간단한 커밋 메세지 입력 후 커밋
git commit -a -m "커밋 메세지" // Staging Area에 들어간 파일에 대해서만 커밋

============ 커밋 이력 조회 =============
git log // 커밋 이력 상세조회
git log --oneline // 커밋 이력 중 커밋ID, 타이틀 메세지만 조회
git log --oneline --decorate --graph --all // 모든 브랜치 커밋 이력 조회
git log -- a.html // 특정 파일의 변경 커밋 조회

============ 로컬저장소와 원격저장소 연결 =============
git remote add origin [자신의 github 원격저장소 주소] // github 원격저장소와 연결
ex) git remote add origin https://github.com/hardcode-web/liveStreaming

git remote -v // 연결된 원격저장소 확인

============ 원격저장소에 저장 =============
git push -u origin master // 원격저장소에 저장

// [rejected] master -> master (fetch first) 에러
// 변경된 파일이 이미 원격저장소에 있을 경우 발생
git pull origin master

// [rejected] master -> master (non-fast-forward) 에러 발생시
git push origin +master

============ 분기(branch) 컨트롤 =============
git branch // branch 목록 보기
git branch [브랜치명] // 새로운 branch 생성
git branch -m [브랜치명][바꿀이름] // 브랜치 수정
git branch -d [브랜치명] // branch 삭제

============ git checkout=============
// 워킹 디렉토리 소스를 특정 커밋 혹은 특정 브랜치로 변경할 때 사용

git checkout [브랜치명] // branch 스위치
git checkout [Commit ID] // 특정 커밋으로 워킹 디렉토리 변경
git checkout [돌아갈 Commit ID] -- [파일 경로] // 특정 파일을 해당 브랜치 혹은 커밋 상태로 변경(롤백)

git checkout -b [브랜치명] // 신규 branch 생성 후 바로 전환
git push origin [브랜치명] // 원격저장소로 branch push

============ git 병합 =============
git merge [브랜치명] // 다른 branch로부터 변경사항 합치기

git checkout master // 특정 branch를 master 브랜치에 합치기
git merge [브랜치명]

============ git 충돌 발생시 =============
<<<<<<<< HEAD
function a(master {}
======
function a(특정 브랜치) {}
>>>>>>>> 특정 브랜치

// 가운데 ======를 기준으로 HEAD 부분의 현재 체크아웃된 브랜치의 내용과 특정 브랜치의
merge한 부분의 차이점을 보여준다.

